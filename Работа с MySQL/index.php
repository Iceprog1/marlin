<?php

//Урок 1 - Что такое База Данных?

// Как соединиться с БД через терминал

// Вход в базу данных просиходит таким образом
// Здесь mysql это та база данных в которой мы работаем, -u (user) -p (password)

//mysql -u root -p

// ---------------------------------------------------------------------------------------

// Чтобы узнать какие базы данных у нас есть мы пишем

// show databases;

// ---------------------------------------------------------------------------------------

// Чтобы выйти из базы данных мы пишем

// exit;

// ---------------------------------------------------------------------------------------

// Чтобы создать базу данных мы пишем

// create database adam

// ---------------------------------------------------------------------------------------


// 2 Урок - Знакомство с PHPMyAdmin

//PhpMyAdmin - это веб-интерфейс, который позволяет вам управлять базами данных MySQL с помощью веб-браузера.
//Он предоставляет удобные инструменты для создания, изменения и удаления баз данных, таблиц, записей и других элементов базы данных.
//PhpMyAdmin облегчает выполнение различных задач, связанных с управлением базами данных, таких как создание резервных копий, импорт и экспорт данных, установка прав доступа и выполнение SQL-запросов.


// 3 Урок - Создание таблиц

// Типы данных в таблицах

//В таблицах PhpMyAdmin можно использовать различные типы данных для определения структуры полей.
// Вот некоторые из наиболее распространенных типов данных, которые можно использовать:

//INT: Целочисленный тип данных для хранения целых чисел. Может быть с знаком или без знака. Например, INT, TINYINT, SMALLINT, MEDIUMINT, BIGINT.

//FLOAT/DOUBLE: Типы данных для хранения чисел с плавающей точкой (дробных чисел). DOUBLE обычно используется для более высокой точности.

//VARCHAR: Тип данных для хранения строк переменной длины. Вы указываете максимальную длину строки при определении поля.
// Например, VARCHAR(255) может хранить до 255 символов.

//CHAR: Тип данных для хранения строк фиксированной длины. Вы указываете фиксированную длину строки при определении поля.
// Например, CHAR(10) будет занимать фиксированное место, даже если в строке меньше символов.

//TEXT: Тип данных для хранения больших объемов текста. Позволяет хранить длинные текстовые значения, такие как описания или комментарии.

//DATE/DATETIME: Типы данных для хранения даты и времени. DATE хранит только дату (год, месяц, день), а DATETIME хранит дату и время.

//ENUM: Тип данных для хранения одного значения из заданного набора. Вы указываете список допустимых значений при определении поля.

//Например, ENUM('Male', 'Female') позволяет выбрать только одно из двух значений: "Male" или "Female".

//BOOLEAN: Тип данных для хранения логических значений. Может принимать значения TRUE (1) или FALSE (0).

// ---------------------------------------------------------------------------------------

//Добавляем идентификатор

//Поле "id" (или иногда "ID") является распространенной практикой в базах данных и обычно используется в качестве первичного ключа для каждой записи в таблице. Вот некоторые особенности и причины использования поля "id":

//Уникальность: Поле "id" предоставляет уникальный идентификатор для каждой записи в таблице.
//Каждая запись должна иметь уникальное значение в поле "id", что позволяет однозначно идентифицировать каждую запись.

//Идентификация: Использование поля "id" облегчает ссылку на конкретные записи в таблице.
//Если вы хотите ссылаться на определенную запись из другой таблицы или из вашего приложения, вы можете использовать значение "id" для указания идентификатора записи, с которой вы работаете.

//Индексирование: Поле "id" обычно является индексируемым полем.
//Индексация позволяет ускорить процессы поиска, сортировки и фильтрации данных в таблице.
//Благодаря использованию поля "id" в качестве индекса, работа с данными становится более эффективной.

//Автоматическое увеличение: Часто поле "id" определяется как автоинкрементное (AUTO_INCREMENT).
//Это означает, что значение "id" будет автоматически увеличиваться для каждой новой записи, обеспечивая уникальное значение без необходимости явного указания.

//Простота и удобство: Использование поля "id" в качестве первичного ключа является стандартной практикой, что делает его простым и удобным в использовании.
//Он обеспечивает стабильность и надежность в структуре данных таблицы.


// 4 Урок - Запрос INSERT

// Запрос INSERT в MySQL используется для вставки новых записей в таблицу базы данных. Он имеет следующий синтаксис:

//INSERT INTO table_name (column1, column2, column3, ...)
//VALUES (value1, value2, value3, ...);

// В данном примере table_name это имя таблицы, (column1, column2, column3, ...) это столбцы в базе типа (id,name,email)
// (value1, value2, value3, ...) это те значения которые мы вставляем в столбцы

//Пример использования запроса INSERT:

//INSERT INTO users (id, name, age)
//VALUES (1, 'John Doe', 25);

// Вы также можете вставить несколько записей с помощью одного запроса INSERT.
// Для этого вы можете указать несколько наборов значений в секции VALUES, разделяя их запятыми:

//INSERT INTO users (id, name, age)
//VALUES (1, 'John Doe', 25),
//       (2, 'Jane Smith', 30),
//       (3, 'Bob Johnson', 35);


//INSERT INTO users (id, name, email) VALUES (1, 'Adam', 'dd@mail.ru');


// 5 Урок - Запрос SELECT

//Запрос SELECT в MySQL используется для выборки данных из таблицы или нескольких таблиц базы данных. Он имеет следующий синтаксис:

//SELECT column1, column2, ...
//FROM table_name;
//где:
//column1, column2, ... - имена столбцов, которые вы хотите выбрать из таблицы. Вы можете указать "*" для выбора всех столбцов.
//table_name - имя таблицы, из которой вы хотите выбрать данные.

//Получить пользователей старше 30 лет:
//SELECT * FROM users WHERE Age > 30;

//Получить пользователей с зарплатой больше $6000:
//SELECT * FROM users WHERE Salary > '$6000';

//Получить имена и возраст пользователей, у которых профессия "Software Engineer":
//SELECT Name, Age FROM employees WHERE Profession = 'Software Engineer';

//Получить продукты типа "Phone" с ценой меньше 1000:
//SELECT * FROM products WHERE Type = 'Phone' AND Price < 1000;

//Получить продукты типа "Phone" или ценой выше 1500:
//SELECT * FROM products WHERE Type = 'Phone' OR Price > 1500;


// 6 Урок - Запрос UPDATE

// Это запрос который обновляет данные в базе. Примечательно что для обновления после SET имя столбца нужно писать в косых кавычках. А так, все известное.

//UPDATE 'users' SET `password` = '1234' WHERE 'id' = 1;


// 7 Урок - Запрос DELETE

DELETE FROM users WHERE id = 2;