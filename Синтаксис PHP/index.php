<?php

// Урок 1 Переменные

// Переменная создается так
//$name = "John";

// Это пример того, как делать конкатенацию
//echo "My name is " . $name;

// В переменных, также хранятся числа
//$x = 5;
//$y = 10;
// В 1 общей переменной, мы прибавили 2 разных числа
//$sum = $x + $y;
// Вывели общую переменную, в которой сейчас лежит число 15
//echo $sum;

// Урок 2 Типы данных

//В PHP есть несколько разных типов данных:

//1. Строки (strings) - это последовательность символов, которые можно использовать для представления текста. Например, "Привет, мир!" или "12345".
//2. Целые числа (integers) - это положительные или отрицательные числа без дробной части. Например, -10, 0, 42.
//3. Дробные числа (floats) - это числа с дробной частью. Например, 3.14 или -2.5.
//4. Булевые значения (booleans) - это значения true (истина) или false (ложь). Например, true или false.
//5. Массивы (arrays) - это наборы данных, которые можно хранить в одной переменной. Например, ["яблоко", "банан", "апельсин"].
//6. Объекты (objects) - это специальные структуры данных, которые позволяют хранить данные в определенном формате. Например, объект "автомобиль" может иметь свойства, такие как "марка", "модель", "год выпуска".
//7. NULL - это специальное значение, которое означает "ничего". Например, если переменная еще не имеет значения, ее можно установить в NULL.

//Урок 3 Массивы

//Массивы - это как коробка со множеством карманов, в которых можно хранить много разных вещей. В PHP массивы нужны, чтобы хранить много данных одновременно и работать с ними.

//$my_array = [1, 2, 3];

//Чтобы добавить новый элемент в массив, нужно использовать функцию array_push

//array_push($my_array, 4);

//Чтобы удалить элемент из массива, нужно использовать ключевое слово unset:

//unset($my_array[1])

//Чтобы изменить значение элемента массива, нужно обратиться к нему по его индексу и присвоить ему новое значение:

//$my_array[1] = 4;

//Чтобы обращаться к элементам массива с помощью ключей, нужно использовать ассоциативные массивы. Например:

//$my_array = ['apple' => 'red', 'banana' => 'yellow'];
//echo $my_array['apple']; // выведет 'red

//Чтобы перебрать элементы массива, можно использовать цикл foreach. Например:

//$my_array = [1, 2, 3];
//foreach ($my_array as $value) {
//    echo $value;
//}

//Многомерные массивы
//Многомерные массивы - это массивы, которые содержат другие массивы в качестве своих элементов.
//Они используются, когда нужно хранить и обрабатывать большое количество данных, организованных в виде таблицы или матрицы.

//Например, мы можем создать многомерный массив, который содержит информацию о нескольких студентах:

//$students = [
//    ['name' => 'John', 'age' => 20, 'grades' => [5, 4, 4]],
//    ['name' => 'Alice', 'age' => 19, 'grades' => [4, 5, 3]],
//    ['name' => 'Bob', 'age' => 21, 'grades' => [3, 4, 5]],
//];

//Ассоциативные массивы
//Ассоциативные массивы - это массивы, которые используют строки в качестве индексов, вместо целых чисел, как в обычных массивах. Они позволяют хранить и обрабатывать данные в виде пар "ключ-значение".

//Например, мы можем создать ассоциативный массив, который содержит информацию о плодах:

//$fruits = [
//    'apple' => 'red',
//    'banana' => 'yellow',
//    'orange' => 'orange',
//];

//Функции для работы с массивами
//array_map - применяет заданную функцию ко всем элементам массива и возвращает новый массив с результатами;

//$numbers = [1, 2, 3];
//$numbers_plus_one = array_map(function($x) {
//    return $x + 1;
//}, $numbers);
//
//var_dump($numbers_plus_one);

// $numbers_plus_one содержит теперь [2, 3, 4]

//Также мы можем использовать функцию array_reduce, чтобы вычислить сумму всех чисел в массиве:

//$numbers = [1, 2, 3];
//$sum = array_reduce($numbers, function($acc, $x) {
//    return $acc + $x;
//}, 0);
//
//var_dump($sum);


//Наконец, мы можем использовать функцию array_walk, чтобы вывести все элементы массива с их индексами:

//$numbers = [1, 2, 3];
//array_walk($numbers, function($value, $key) {
//    echo "[$key] => $value\n <br>";
//});

// выводит:
// [0] => 1
// [1] => 2
// [2] => 3

//Урок 3 Циклы

//Типы циклов
//В PHP есть несколько типов циклов, вот некоторые из них:

//Цикл for: используется, когда вы знаете, сколько раз вы хотите повторить код. Например, если вы хотите напечатать числа от 1 до 10. То есть, код повторяется определенное количество раз.
//Цикл while: используется, когда вы хотите повторять код, пока условие истинно. Например, если вы хотите, чтобы программа продолжала запрашивать у пользователя ввод, пока он не введет правильный ответ. То есть, код будет повторяться, пока условие не перестанет быть истинным.
//Цикл do-while: похож на цикл while, но он гарантирует, что код выполнится хотя бы один раз. Например, если вы хотите, чтобы программа сначала выполнила какой-то код, а потом продолжила запрашивать у пользователя ввод до тех пор, пока он не введет правильный ответ.
//Цикл foreach: используется для перебора элементов в массиве. Например, если вы хотите вывести список фруктов, которые хранятся в массиве $fruits.

//Цикл for используется, когда вам нужно повторить код определенное количество раз. Вот пример:

//for ($i = 1; $i <= 10; $i++) {
//    echo $i;
//}

//Цикл while используется, когда вы хотите повторять код, пока условие истинно. Вот пример:

//$answer = '';
//while ($answer != 'yes') {
//    echo 'Do you want to continue?';
//    $answer = readline();
//}

//Цикл do-while похож на цикл while, но он гарантирует, что код выполнится хотя бы один раз. Вот пример:

//$answer = '';
//do {
//    echo 'Do you want to continue?';
//    $answer = readline();
//} while ($answer != 'yes');

//Цикл foreach используется для перебора элементов в массиве. Вот пример:

//$fruits = array('apple', 'banana', 'orange');
//foreach ($fruits as $fruit) {
//    echo $fruit;
//}

//Вывести все четные числа от 2 до 20.
//for ($i = 2; $i <= 20; $i++){
//    if ($i % 2 == 0){
//        echo $i . ' ';
//    }
//}

//Вывести таблицу умножения для определенного числа (например, для числа 5).
//$number = 5;
//for ($i = 1; $i <= 9; $i++){
//    echo $number . '*' . $i . '=' . $number * $i . '<br>';
//}

//Вывести все буквы алфавита от A до Z.
//for ($i = ord('A'); $i <= ord('Z'); $i++) {
//    echo chr($i) . " ";
//}

//Вывести все числа от 10 до 1 в обратном порядке.

//for ($i = 10; $i > 0; $i--){
//    echo $i . ' ';
//}

//Подсчитать сумму чисел от 1 до 100.

//$sum = 0;
//for ($i = 1; $i < 100; $i++){
//    $sum += $i;
//}
//
//echo $sum;


//$_GET, $_POST, $_SESSION и $_COOKIE - это глобальные массивы в PHP, которые используются для хранения различных типов данных.

//$_GET: массив, содержащий данные, отправленные на сервер через метод GET. Данные передаются в URL в виде параметров. Например, если на страницу index.php передать параметры ?name=John&age=30, то они будут доступны в массиве $_GET. Чтобы получить значение параметра, можно использовать конструкцию $_GET['name']. Важно отметить, что данные, передаваемые методом GET, ограничены по размеру и могут быть уязвимы для атак типа XSS.
//$_POST: массив, содержащий данные, отправленные на сервер через метод POST. Данные передаются в теле запроса и не видны в URL. Данные, отправленные методом POST, не имеют ограничений по размеру и обеспечивают более безопасную передачу данных, чем метод GET.
//$_SESSION: массив, содержащий данные, сохраненные между различными запросами, связанными с одной и той же сессией. Сессия создается с помощью функции session_start(). Затем можно сохранять данные в массив $_SESSION, используя ключи и значения. Данные в массиве $_SESSION будут доступны на всех страницах, связанных с текущей сессией, пока сессия не будет уничтожена.
//$_COOKIE: массив, содержащий куки, сохраненные на компьютере пользователя. Куки - это данные, отправляемые на сервер вместе с каждым запросом. Они могут использоваться для хранения информации о пользователе, такой как предпочтения, идентификаторы сессии и т.д. Данные в массиве $_COOKIE могут быть прочитаны и изменены только на стороне клиента.


//Примеры кода для каждого массива

//$_GET:

//// URL: http://example.com/?name=John&age=30
//$name = $_GET['name']; // "John"
//$age = $_GET['age']; // 30


//$_POST:

//// HTML форма
//< form method="post" action="process.php">
//  < input type="text" name="username">
//  < input type="password" name="password">
//  < input type="submit" value="Submit">

//// PHP скрипт process.php
//$username = $_POST['username'];
//$password = $_POST['password'];

//$_SESSION:

//// Начать сессию
//session_start();

//// Сохранить данные в $_SESSION
//$_SESSION['username'] = 'John';

//// Получить данные из $_SESSION
//$username = $_SESSION['username'];


//$_COOKIE:

//// Записать куки
//setcookie('username', 'John', time() + 3600, '/');
//
//// Получить значение куки
//$username = $_COOKIE['username'];

